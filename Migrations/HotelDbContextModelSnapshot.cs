// <auto-generated />
using System;
using HotelDesktop.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HotelDesktop.Migrations
{
    [DbContext(typeof(HotelDbContext))]
    partial class HotelDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("accounts_id_seq");

            modelBuilder.HasSequence("accounts_transactions_id_seq");

            modelBuilder.HasSequence("bank_cards_id_seq");

            modelBuilder.HasSequence("banks_id_seq");

            modelBuilder.HasSequence("cash_desks_id_seq");

            modelBuilder.HasSequence("departments_id_seq");

            modelBuilder.HasSequence("employees_id_seq");

            modelBuilder.HasSequence("genders_id_seq");

            modelBuilder.HasSequence("guests_id_seq");

            modelBuilder.HasSequence("inns_id_seq");

            modelBuilder.HasSequence("messages_id_seq");

            modelBuilder.HasSequence("passport_issuers_id_seq");

            modelBuilder.HasSequence("passports_id_seq");

            modelBuilder.HasSequence("payment_systems_id_seq");

            modelBuilder.HasSequence("positions_id_seq");

            modelBuilder.HasSequence("reservations_guests_id_seq");

            modelBuilder.HasSequence("reservations_id_seq");

            modelBuilder.HasSequence("role_places_id_seq");

            modelBuilder.HasSequence("roles_id_seq");

            modelBuilder.HasSequence("rooms_id_seq");

            modelBuilder.HasSequence("rooms_photos_id_seq");

            modelBuilder.HasSequence("roomtypes_id_seq");

            modelBuilder.HasSequence("services_id_seq");

            modelBuilder.HasSequence("snilses_id_seq");

            modelBuilder.HasSequence("tariffs_id_seq");

            modelBuilder.HasSequence("taxes_id_seq");

            modelBuilder.HasSequence("transactions_id_seq");

            modelBuilder.HasSequence("user_jwt_id_seq");

            modelBuilder.HasSequence("users_id_seq");

            modelBuilder.HasSequence("users_roles_id_seq");

            modelBuilder.Entity("HotelDesktop.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BankCardId")
                        .HasColumnType("integer")
                        .HasColumnName("bank_card_id");

                    b.Property<string>("BlockReason")
                        .HasColumnType("character varying")
                        .HasColumnName("block_reason");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean")
                        .HasColumnName("is_blocked");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("accounts_pkey");

                    b.HasIndex("BankCardId");

                    b.HasIndex("UserId");

                    b.ToTable("accounts", null, t =>
                        {
                            t.HasComment("Информация о счетах пользователей");
                        });
                });

            modelBuilder.Entity("HotelDesktop.Models.AccountsTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("integer")
                        .HasColumnName("account_id");

                    b.Property<int>("TransactionId")
                        .HasColumnType("integer")
                        .HasColumnName("transaction_id");

                    b.HasKey("Id")
                        .HasName("accounts_transactions_pkey");

                    b.HasIndex("AccountId");

                    b.HasIndex("TransactionId");

                    b.ToTable("accounts_transactions", null, t =>
                        {
                            t.HasComment("Транзакции и аккаунты, к которым они привязаны");
                        });
                });

            modelBuilder.Entity("HotelDesktop.Models.Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Bik")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("bik");

                    b.Property<string>("Ogrn")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("ogrn");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("registration_number");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("banks_pkey");

                    b.HasIndex(new[] { "Bik" }, "banks_bik_key")
                        .IsUnique();

                    b.HasIndex(new[] { "Ogrn" }, "banks_ogrn_key")
                        .IsUnique();

                    b.HasIndex(new[] { "RegistrationNumber" }, "banks_registration_number_key")
                        .IsUnique();

                    b.HasIndex(new[] { "Title" }, "banks_title_key")
                        .IsUnique();

                    b.ToTable("banks", null, t =>
                        {
                            t.HasComment("Информация о банках");
                        });
                });

            modelBuilder.Entity("HotelDesktop.Models.BankCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BankId")
                        .HasColumnType("integer")
                        .HasColumnName("bank_id");

                    b.Property<DateOnly>("ExpiredDate")
                        .HasColumnType("date")
                        .HasColumnName("expired_date");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("number");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("owner");

                    b.Property<int>("PaymentSystemId")
                        .HasColumnType("integer")
                        .HasColumnName("payment_system_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("bank_cards_pkey");

                    b.HasIndex("BankId");

                    b.HasIndex("PaymentSystemId");

                    b.HasIndex("UserId");

                    b.ToTable("bank_cards", null, t =>
                        {
                            t.HasComment("Информация о банковских карточках пользователей");
                        });
                });

            modelBuilder.Entity("HotelDesktop.Models.CashDesk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("number");

                    b.HasKey("Id")
                        .HasName("cash_desks_pkey");

                    b.HasIndex(new[] { "Number" }, "cash_desks_number_key")
                        .IsUnique();

                    b.ToTable("cash_desks", null, t =>
                        {
                            t.HasComment("Информация о кассах");
                        });
                });

            modelBuilder.Entity("HotelDesktop.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("departments_pkey");

                    b.HasIndex(new[] { "Title" }, "departments_title_key")
                        .IsUnique();

                    b.ToTable("departments", null, t =>
                        {
                            t.HasComment("Подразделения предприятия");
                        });
                });

            modelBuilder.Entity("HotelDesktop.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("FireDate")
                        .HasColumnType("date")
                        .HasColumnName("fire_date");

                    b.Property<DateOnly>("HireDate")
                        .HasColumnType("date")
                        .HasColumnName("hire_date");

                    b.Property<bool>("IsFired")
                        .HasColumnType("boolean")
                        .HasColumnName("is_fired");

                    b.Property<int>("PositionId")
                        .HasColumnType("integer")
                        .HasColumnName("position_id");

                    b.Property<decimal>("Salary")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("salary");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("employees_pkey");

                    b.HasIndex("PositionId");

                    b.HasIndex("UserId");

                    b.ToTable("employees", null, t =>
                        {
                            t.HasComment("Сотрудники предприятия");
                        });
                });

            modelBuilder.Entity("HotelDesktop.Models.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("genders_pkey");

                    b.HasIndex(new[] { "Title" }, "genders_title_key")
                        .IsUnique();

                    b.ToTable("genders", null, t =>
                        {
                            t.HasComment("Определения полов пользователей");
                        });
                });

            modelBuilder.Entity("HotelDesktop.Models.Guest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("integer")
                        .HasColumnName("account_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("guests_pkey");

                    b.HasIndex("AccountId");

                    b.HasIndex("UserId");

                    b.ToTable("guests", null, t =>
                        {
                            t.HasComment("Информация о гостях");
                        });
                });

            modelBuilder.Entity("HotelDesktop.Models.Inn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("GetDate")
                        .HasColumnType("date")
                        .HasColumnName("get_date");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("lastname");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)")
                        .HasColumnName("number");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("patronymic");

                    b.HasKey("Id")
                        .HasName("inns_pkey");

                    b.HasIndex(new[] { "Number" }, "inns_number_key")
                        .IsUnique();

                    b.ToTable("inns", null, t =>
                        {
                            t.HasComment("Записи о документах ИНН пользователей");
                        });
                });

            modelBuilder.Entity("HotelDesktop.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("From")
                        .HasColumnType("integer")
                        .HasColumnName("from");

                    b.Property<bool>("IsReaded")
                        .HasColumnType("boolean")
                        .HasColumnName("is_readed");

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message_text");

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("send_date");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("theme");

                    b.Property<int>("To")
                        .HasColumnType("integer")
                        .HasColumnName("to");

                    b.HasKey("Id")
                        .HasName("messages_pkey");

                    b.HasIndex("From");

                    b.HasIndex("To");

                    b.ToTable("messages", null, t =>
                        {
                            t.HasComment("Сообщения пользователей");
                        });
                });

            modelBuilder.Entity("HotelDesktop.Models.Passport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Birthday")
                        .HasColumnType("date")
                        .HasColumnName("birthday");

                    b.Property<string>("Birthlocation")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("birthlocation");

                    b.Property<int>("GenderId")
                        .HasColumnType("integer")
                        .HasColumnName("gender_id");

                    b.Property<DateOnly>("IssueDate")
                        .HasColumnType("date")
                        .HasColumnName("issue_date");

                    b.Property<int>("IssuerId")
                        .HasColumnType("integer")
                        .HasColumnName("issuer_id");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("lastname");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("number");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("patronymic");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("bytea")
                        .HasColumnName("photo");

                    b.Property<int?>("PreviousPassportId")
                        .HasColumnType("integer")
                        .HasColumnName("previous_passport_id");

                    b.Property<string>("Series")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("series");

                    b.Property<string>("UnitCode")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("unit_code");

                    b.HasKey("Id")
                        .HasName("passports_pkey");

                    b.HasIndex("GenderId");

                    b.HasIndex("IssuerId");

                    b.HasIndex("PreviousPassportId");

                    b.HasIndex(new[] { "Series", "Number" }, "passports_series_number_key")
                        .IsUnique();

                    b.ToTable("passports", (string)null);
                });

            modelBuilder.Entity("HotelDesktop.Models.PassportIssuer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("passport_issuers_pkey");

                    b.HasIndex(new[] { "Title" }, "passport_issuers_title_key")
                        .IsUnique();

                    b.ToTable("passport_issuers", null, t =>
                        {
                            t.HasComment("Отделения выдачи паспортов");
                        });
                });

            modelBuilder.Entity("HotelDesktop.Models.PaymentSystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("payment_systems_pkey");

                    b.HasIndex(new[] { "Title" }, "payment_systems_title_key")
                        .IsUnique();

                    b.ToTable("payment_systems", null, t =>
                        {
                            t.HasComment("Платёжные системы");
                        });
                });

            modelBuilder.Entity("HotelDesktop.Models.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("department_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("positions_pkey");

                    b.HasIndex("DepartmentId");

                    b.HasIndex(new[] { "Title" }, "positions_title_key")
                        .IsUnique();

                    b.ToTable("positions", null, t =>
                        {
                            t.HasComment("Должности");
                        });
                });

            modelBuilder.Entity("HotelDesktop.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("integer")
                        .HasColumnName("account_id");

                    b.Property<int>("Adults")
                        .HasColumnType("integer")
                        .HasColumnName("adults");

                    b.Property<int>("Childrens")
                        .HasColumnType("integer")
                        .HasColumnName("childrens");

                    b.Property<int>("ContactGenderId")
                        .HasColumnType("integer")
                        .HasColumnName("contact_gender_id");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("contact_name");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("contact_phone");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<int>("MainGuestId")
                        .HasColumnType("integer")
                        .HasColumnName("main_guest_id");

                    b.Property<decimal>("ServiceCount")
                        .HasPrecision(3, 2)
                        .HasColumnType("numeric(3,2)")
                        .HasColumnName("service_count");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<int>("TariffId")
                        .HasColumnType("integer")
                        .HasColumnName("tariff_id");

                    b.HasKey("Id")
                        .HasName("reservations_pkey");

                    b.HasIndex("AccountId");

                    b.HasIndex("ContactGenderId");

                    b.HasIndex("MainGuestId");

                    b.HasIndex("TariffId");

                    b.ToTable("reservations", null, t =>
                        {
                            t.HasComment("Информация о бронировании");
                        });
                });

            modelBuilder.Entity("HotelDesktop.Models.ReservationsGuest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GuestId")
                        .HasColumnType("integer")
                        .HasColumnName("guest_id");

                    b.Property<bool>("IsChild")
                        .HasColumnType("boolean")
                        .HasColumnName("is_child");

                    b.Property<int>("ReservationId")
                        .HasColumnType("integer")
                        .HasColumnName("reservation_id");

                    b.HasKey("Id")
                        .HasName("reservations_guests_pkey");

                    b.HasIndex("GuestId");

                    b.HasIndex("ReservationId");

                    b.ToTable("reservations_guests", null, t =>
                        {
                            t.HasComment("Информация о бронированиях и связанных с ними гостях");
                        });
                });

            modelBuilder.Entity("HotelDesktop.Models.RolePlace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Image")
                        .HasColumnType("bytea")
                        .HasColumnName("image");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("role_places_pk");

                    b.HasIndex(new[] { "Title" }, "role_places_un")
                        .IsUnique();

                    b.ToTable("role_places", null, t =>
                        {
                            t.HasComment("Опиасния ролевых мест пользователей");
                        });
                });

            modelBuilder.Entity("HotelDesktop.Models.RolePlacesPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PositionId")
                        .HasColumnType("integer")
                        .HasColumnName("position_id");

                    b.Property<int>("RolePlaceId")
                        .HasColumnType("integer")
                        .HasColumnName("role_place_id");

                    b.HasKey("Id")
                        .HasName("newtable_pk");

                    b.HasIndex("PositionId");

                    b.HasIndex("RolePlaceId");

                    b.ToTable("role_places_positions", null, t =>
                        {
                            t.HasComment("Информация о том, какие ролевые места доступны различным пользователйм в зависимости от от должности");
                        });
                });

            modelBuilder.Entity("HotelDesktop.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Cost")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("cost");

                    b.Property<int>("Floor")
                        .HasColumnType("integer")
                        .HasColumnName("floor");

                    b.Property<bool>("Jacuzzi")
                        .HasColumnType("boolean")
                        .HasColumnName("jacuzzi");

                    b.Property<bool>("Minibar")
                        .HasColumnType("boolean")
                        .HasColumnName("minibar");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("number");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<int>("RoomTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("room_type_id");

                    b.Property<int>("Rooms")
                        .HasColumnType("integer")
                        .HasColumnName("rooms");

                    b.HasKey("Id")
                        .HasName("rooms_pkey");

                    b.HasIndex("RoomTypeId");

                    b.HasIndex(new[] { "Number" }, "rooms_number_key")
                        .IsUnique();

                    b.ToTable("rooms", (string)null);
                });

            modelBuilder.Entity("HotelDesktop.Models.RoomType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('roomtypes_id_seq'::regclass)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("room_types_pkey");

                    b.HasIndex(new[] { "Title" }, "room_types_title_key")
                        .IsUnique();

                    b.ToTable("room_types", null, t =>
                        {
                            t.HasComment("Информация о типах номеров");
                        });
                });

            modelBuilder.Entity("HotelDesktop.Models.RoomsPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('rooms_photos_id_seq'::regclass)");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("bytea")
                        .HasColumnName("photo");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer")
                        .HasColumnName("room_id");

                    b.HasKey("Id")
                        .HasName("rooms_photo_pkey");

                    b.HasIndex("RoomId");

                    b.ToTable("rooms_photo", null, t =>
                        {
                            t.HasComment("Фотографии номеров");
                        });
                });

            modelBuilder.Entity("HotelDesktop.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Cost")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("cost");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("services_pkey");

                    b.HasIndex(new[] { "Title" }, "services_title_key")
                        .IsUnique();

                    b.ToTable("services", null, t =>
                        {
                            t.HasComment("Ифнормация об услугах отеля");
                        });
                });

            modelBuilder.Entity("HotelDesktop.Models.Snils", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("lastname");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)")
                        .HasColumnName("number");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("patronymic");

                    b.HasKey("Id")
                        .HasName("snilses_pkey");

                    b.HasIndex(new[] { "Number" }, "snilses_number_key")
                        .IsUnique();

                    b.ToTable("snilses", null, t =>
                        {
                            t.HasComment("СНИЛСы пользователей");
                        });
                });

            modelBuilder.Entity("HotelDesktop.Models.Tariff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Breakfast")
                        .HasColumnType("boolean")
                        .HasColumnName("breakfast");

                    b.Property<decimal>("Cost")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("cost");

                    b.Property<bool>("Dinner")
                        .HasColumnType("boolean")
                        .HasColumnName("dinner");

                    b.Property<bool>("Lunch")
                        .HasColumnType("boolean")
                        .HasColumnName("lunch");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("tariffs_pkey");

                    b.HasIndex(new[] { "Title" }, "tariffs_title_key")
                        .IsUnique();

                    b.ToTable("tariffs", null, t =>
                        {
                            t.HasComment("Тарифы на аренду номеров");
                        });
                });

            modelBuilder.Entity("HotelDesktop.Models.Taxes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.Property<decimal>("Rate")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("rate");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("taxes_pkey");

                    b.HasIndex(new[] { "Title" }, "taxes_title_key")
                        .IsUnique();

                    b.ToTable("taxes", null, t =>
                        {
                            t.HasComment("Информация о налогах на финансовые транзакции");
                        });
                });

            modelBuilder.Entity("HotelDesktop.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CashDeskId")
                        .HasColumnType("integer")
                        .HasColumnName("cash_desk_id");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.Property<decimal>("ServiceCount")
                        .HasPrecision(3, 2)
                        .HasColumnType("numeric(3,2)")
                        .HasColumnName("service_count");

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer")
                        .HasColumnName("service_id");

                    b.Property<int>("TaxId")
                        .HasColumnType("integer")
                        .HasColumnName("tax_id");

                    b.HasKey("Id")
                        .HasName("transactions_pkey");

                    b.HasIndex("CashDeskId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("TaxId");

                    b.ToTable("transactions", null, t =>
                        {
                            t.HasComment("Информация о финансовых транзакциях");
                        });
                });

            modelBuilder.Entity("HotelDesktop.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("email");

                    b.Property<int>("InnId")
                        .HasColumnType("integer")
                        .HasColumnName("inn_id");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("login");

                    b.Property<int>("PassportId")
                        .HasColumnType("integer")
                        .HasColumnName("passport_id");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("phone");

                    b.Property<int>("Position")
                        .HasColumnType("integer")
                        .HasColumnName("position");

                    b.Property<int>("SnilsId")
                        .HasColumnType("integer")
                        .HasColumnName("snils_id");

                    b.HasKey("Id")
                        .HasName("users_pkey");

                    b.HasIndex("InnId");

                    b.HasIndex("PassportId");

                    b.HasIndex("SnilsId");

                    b.HasIndex(new[] { "Email" }, "users_email_key")
                        .IsUnique();

                    b.HasIndex(new[] { "Login" }, "users_login_key")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("HotelDesktop.Models.UserJwt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('users_id_seq'::regclass)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("address");

                    b.Property<string>("Device")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("device");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("ip");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("refresh_token");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("user_jwt_pkey");

                    b.HasIndex("UserId");

                    b.ToTable("user_jwt", null, t =>
                        {
                            t.HasComment("Информация о выданных токенах доступа");
                        });
                });

            modelBuilder.Entity("HotelDesktop.Models.Account", b =>
                {
                    b.HasOne("HotelDesktop.Models.BankCard", "BankCard")
                        .WithMany("Accounts")
                        .HasForeignKey("BankCardId")
                        .IsRequired()
                        .HasConstraintName("accounts_bank_card_id_fkey");

                    b.HasOne("HotelDesktop.Models.User", "User")
                        .WithMany("Accounts")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("accounts_user_id_fkey");

                    b.Navigation("BankCard");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HotelDesktop.Models.AccountsTransaction", b =>
                {
                    b.HasOne("HotelDesktop.Models.Account", "Account")
                        .WithMany("AccountsTransactions")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("accounts_transactions_account_id_fkey");

                    b.HasOne("HotelDesktop.Models.Transaction", "Transaction")
                        .WithMany("AccountsTransactions")
                        .HasForeignKey("TransactionId")
                        .IsRequired()
                        .HasConstraintName("accounts_transactions_transaction_id_fkey");

                    b.Navigation("Account");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("HotelDesktop.Models.BankCard", b =>
                {
                    b.HasOne("HotelDesktop.Models.Bank", "Bank")
                        .WithMany("BankCards")
                        .HasForeignKey("BankId")
                        .IsRequired()
                        .HasConstraintName("bank_cards_bank_id_fkey");

                    b.HasOne("HotelDesktop.Models.PaymentSystem", "PaymentSystem")
                        .WithMany("BankCards")
                        .HasForeignKey("PaymentSystemId")
                        .IsRequired()
                        .HasConstraintName("bank_cards_payment_system_id_fkey");

                    b.HasOne("HotelDesktop.Models.User", "User")
                        .WithMany("BankCards")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("bank_cards_user_id_fkey");

                    b.Navigation("Bank");

                    b.Navigation("PaymentSystem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HotelDesktop.Models.Employee", b =>
                {
                    b.HasOne("HotelDesktop.Models.Position", "Position")
                        .WithMany("Employees")
                        .HasForeignKey("PositionId")
                        .IsRequired()
                        .HasConstraintName("employees_position_id_fkey");

                    b.HasOne("HotelDesktop.Models.User", "User")
                        .WithMany("Employees")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("employees_user_id_fkey");

                    b.Navigation("Position");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HotelDesktop.Models.Guest", b =>
                {
                    b.HasOne("HotelDesktop.Models.Account", "Account")
                        .WithMany("Guests")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("guests_account_id_fkey");

                    b.HasOne("HotelDesktop.Models.User", "User")
                        .WithMany("Guests")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("guests_user_id_fkey");

                    b.Navigation("Account");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HotelDesktop.Models.Message", b =>
                {
                    b.HasOne("HotelDesktop.Models.User", "FromNavigation")
                        .WithMany("MessageFromNavigations")
                        .HasForeignKey("From")
                        .IsRequired()
                        .HasConstraintName("messages_from_fkey");

                    b.HasOne("HotelDesktop.Models.User", "ToNavigation")
                        .WithMany("MessageToNavigations")
                        .HasForeignKey("To")
                        .IsRequired()
                        .HasConstraintName("messages_to_fkey");

                    b.Navigation("FromNavigation");

                    b.Navigation("ToNavigation");
                });

            modelBuilder.Entity("HotelDesktop.Models.Passport", b =>
                {
                    b.HasOne("HotelDesktop.Models.Gender", "Gender")
                        .WithMany("Passports")
                        .HasForeignKey("GenderId")
                        .IsRequired()
                        .HasConstraintName("passports_gender_id_fkey");

                    b.HasOne("HotelDesktop.Models.PassportIssuer", "Issuer")
                        .WithMany("Passports")
                        .HasForeignKey("IssuerId")
                        .IsRequired()
                        .HasConstraintName("passports_issuer_id_fkey");

                    b.HasOne("HotelDesktop.Models.Passport", "PreviousPassport")
                        .WithMany("InversePreviousPassport")
                        .HasForeignKey("PreviousPassportId")
                        .HasConstraintName("passports_previous_passport_id_fkey");

                    b.Navigation("Gender");

                    b.Navigation("Issuer");

                    b.Navigation("PreviousPassport");
                });

            modelBuilder.Entity("HotelDesktop.Models.Position", b =>
                {
                    b.HasOne("HotelDesktop.Models.Department", "Department")
                        .WithMany("Positions")
                        .HasForeignKey("DepartmentId")
                        .IsRequired()
                        .HasConstraintName("positions_department_id_fkey");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("HotelDesktop.Models.Reservation", b =>
                {
                    b.HasOne("HotelDesktop.Models.Account", "Account")
                        .WithMany("Reservations")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("reservations_account_id_fkey");

                    b.HasOne("HotelDesktop.Models.Gender", "ContactGender")
                        .WithMany("Reservations")
                        .HasForeignKey("ContactGenderId")
                        .IsRequired()
                        .HasConstraintName("reservations_contact_gender_id_fkey");

                    b.HasOne("HotelDesktop.Models.Guest", "MainGuest")
                        .WithMany("Reservations")
                        .HasForeignKey("MainGuestId")
                        .IsRequired()
                        .HasConstraintName("reservations_main_guest_id_fkey");

                    b.HasOne("HotelDesktop.Models.Tariff", "Tariff")
                        .WithMany("Reservations")
                        .HasForeignKey("TariffId")
                        .IsRequired()
                        .HasConstraintName("reservations_tariff_id_fkey");

                    b.Navigation("Account");

                    b.Navigation("ContactGender");

                    b.Navigation("MainGuest");

                    b.Navigation("Tariff");
                });

            modelBuilder.Entity("HotelDesktop.Models.ReservationsGuest", b =>
                {
                    b.HasOne("HotelDesktop.Models.Guest", "Guest")
                        .WithMany("ReservationsGuests")
                        .HasForeignKey("GuestId")
                        .IsRequired()
                        .HasConstraintName("reservations_guests_guest_id_fkey");

                    b.HasOne("HotelDesktop.Models.Reservation", "Reservation")
                        .WithMany("ReservationsGuests")
                        .HasForeignKey("ReservationId")
                        .IsRequired()
                        .HasConstraintName("reservations_guests_reservation_id_fkey");

                    b.Navigation("Guest");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("HotelDesktop.Models.RolePlacesPosition", b =>
                {
                    b.HasOne("HotelDesktop.Models.Position", "Position")
                        .WithMany("RolePlacesPositions")
                        .HasForeignKey("PositionId")
                        .IsRequired()
                        .HasConstraintName("role_places_positions_fk");

                    b.HasOne("HotelDesktop.Models.RolePlace", "RolePlace")
                        .WithMany("RolePlacesPositions")
                        .HasForeignKey("RolePlaceId")
                        .IsRequired()
                        .HasConstraintName("role_places_positions_fk_1");

                    b.Navigation("Position");

                    b.Navigation("RolePlace");
                });

            modelBuilder.Entity("HotelDesktop.Models.Room", b =>
                {
                    b.HasOne("HotelDesktop.Models.RoomType", "RoomType")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomTypeId")
                        .IsRequired()
                        .HasConstraintName("rooms_room_type_id_fkey");

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("HotelDesktop.Models.RoomsPhoto", b =>
                {
                    b.HasOne("HotelDesktop.Models.Room", "Room")
                        .WithMany("RoomsPhotos")
                        .HasForeignKey("RoomId")
                        .IsRequired()
                        .HasConstraintName("rooms_photo_room_id_fkey");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HotelDesktop.Models.Transaction", b =>
                {
                    b.HasOne("HotelDesktop.Models.CashDesk", "CashDesk")
                        .WithMany("Transactions")
                        .HasForeignKey("CashDeskId")
                        .IsRequired()
                        .HasConstraintName("transactions_cash_desk_id_fkey");

                    b.HasOne("HotelDesktop.Models.Service", "Service")
                        .WithMany("Transactions")
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("transactions_service_id_fkey");

                    b.HasOne("HotelDesktop.Models.Taxes", "Tax")
                        .WithMany("Transactions")
                        .HasForeignKey("TaxId")
                        .IsRequired()
                        .HasConstraintName("transactions_tax_id_fkey");

                    b.Navigation("CashDesk");

                    b.Navigation("Service");

                    b.Navigation("Tax");
                });

            modelBuilder.Entity("HotelDesktop.Models.User", b =>
                {
                    b.HasOne("HotelDesktop.Models.Position", "IdNavigation")
                        .WithOne("User")
                        .HasForeignKey("HotelDesktop.Models.User", "Id")
                        .IsRequired()
                        .HasConstraintName("users_fk");

                    b.HasOne("HotelDesktop.Models.Inn", "Inn")
                        .WithMany("Users")
                        .HasForeignKey("InnId")
                        .IsRequired()
                        .HasConstraintName("users_inn_id_fkey");

                    b.HasOne("HotelDesktop.Models.Passport", "Passport")
                        .WithMany("Users")
                        .HasForeignKey("PassportId")
                        .IsRequired()
                        .HasConstraintName("users_passport_id_fkey");

                    b.HasOne("HotelDesktop.Models.Snils", "Snils")
                        .WithMany("Users")
                        .HasForeignKey("SnilsId")
                        .IsRequired()
                        .HasConstraintName("users_snils_id_fkey");

                    b.Navigation("IdNavigation");

                    b.Navigation("Inn");

                    b.Navigation("Passport");

                    b.Navigation("Snils");
                });

            modelBuilder.Entity("HotelDesktop.Models.UserJwt", b =>
                {
                    b.HasOne("HotelDesktop.Models.User", "User")
                        .WithMany("UserJwts")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("user_jwt_user_id_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HotelDesktop.Models.Account", b =>
                {
                    b.Navigation("AccountsTransactions");

                    b.Navigation("Guests");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("HotelDesktop.Models.Bank", b =>
                {
                    b.Navigation("BankCards");
                });

            modelBuilder.Entity("HotelDesktop.Models.BankCard", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("HotelDesktop.Models.CashDesk", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("HotelDesktop.Models.Department", b =>
                {
                    b.Navigation("Positions");
                });

            modelBuilder.Entity("HotelDesktop.Models.Gender", b =>
                {
                    b.Navigation("Passports");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("HotelDesktop.Models.Guest", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("ReservationsGuests");
                });

            modelBuilder.Entity("HotelDesktop.Models.Inn", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("HotelDesktop.Models.Passport", b =>
                {
                    b.Navigation("InversePreviousPassport");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("HotelDesktop.Models.PassportIssuer", b =>
                {
                    b.Navigation("Passports");
                });

            modelBuilder.Entity("HotelDesktop.Models.PaymentSystem", b =>
                {
                    b.Navigation("BankCards");
                });

            modelBuilder.Entity("HotelDesktop.Models.Position", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("RolePlacesPositions");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HotelDesktop.Models.Reservation", b =>
                {
                    b.Navigation("ReservationsGuests");
                });

            modelBuilder.Entity("HotelDesktop.Models.RolePlace", b =>
                {
                    b.Navigation("RolePlacesPositions");
                });

            modelBuilder.Entity("HotelDesktop.Models.Room", b =>
                {
                    b.Navigation("RoomsPhotos");
                });

            modelBuilder.Entity("HotelDesktop.Models.RoomType", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("HotelDesktop.Models.Service", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("HotelDesktop.Models.Snils", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("HotelDesktop.Models.Tariff", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("HotelDesktop.Models.Taxes", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("HotelDesktop.Models.Transaction", b =>
                {
                    b.Navigation("AccountsTransactions");
                });

            modelBuilder.Entity("HotelDesktop.Models.User", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("BankCards");

                    b.Navigation("Employees");

                    b.Navigation("Guests");

                    b.Navigation("MessageFromNavigations");

                    b.Navigation("MessageToNavigations");

                    b.Navigation("UserJwts");
                });
#pragma warning restore 612, 618
        }
    }
}
